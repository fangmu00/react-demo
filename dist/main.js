webpackJsonp([0],{"./app/app.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=n.n(o),a=n(1),l=n.n(a),s=n("../node_modules/._react-hot-loader@3.0.0-beta.7@react-hot-loader/index.js"),c=(n.n(s),n("./components/HelloWord.jsx")),i=function(e){l.a.render(r.a.createElement(s.AppContainer,null,r.a.createElement(e,null)),document.getElementById("App"))};i(c.a);!function(){"undefined"!=typeof __REACT_HOT_LOADER__&&__REACT_HOT_LOADER__.register(i,"render","D:/Test/react-demo/src/app/app.js")}()},"./components/HelloWord.jsx":function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var l=n("../node_modules/._antd@2.10.1@antd/lib/button/style/css.js"),s=(n.n(l),n("../node_modules/._antd@2.10.1@antd/lib/button/index.js")),c=n.n(s),i=n("../node_modules/._antd@2.10.1@antd/lib/modal/style/css.js"),u=(n.n(i),n("../node_modules/._antd@2.10.1@antd/lib/modal/index.js")),d=n.n(u),p=n(0),_=n.n(p),f=n(1),m=(n.n(f),function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}()),b=function(e){function t(e){o(this,t);var n=r(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={text:"Hello Word1"},n}return a(t,e),m(t,[{key:"info",value:function(){d.a.info({title:"Message",content:_.a.createElement("div",null,_.a.createElement("p",null,this.state.text)),onOk:function(){}})}},{key:"render",value:function(){return _.a.createElement("div",null,_.a.createElement(c.a,{type:"primary",onClick:this.info.bind(this)},"Click me"))}}]),t}(_.a.Component),y=b;t.a=y;!function(){"undefined"!=typeof __REACT_HOT_LOADER__&&(__REACT_HOT_LOADER__.register(b,"HelloWord","D:/Test/react-demo/src/components/HelloWord.jsx"),__REACT_HOT_LOADER__.register(y,"default","D:/Test/react-demo/src/components/HelloWord.jsx"))}()},0:function(e,t){e.exports=React},1:function(e,t){e.exports=ReactDOM},2:function(e,t,n){n("../node_modules/._react-hot-loader@3.0.0-beta.7@react-hot-loader/patch.js"),n("../node_modules/._webpack-dev-server@2.4.5@webpack-dev-server/client/index.js?http:/localhost:8080"),n("../node_modules/._webpack@2.5.1@webpack/hot/only-dev-server.js"),e.exports=n("./app/app.js")}},[2]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,